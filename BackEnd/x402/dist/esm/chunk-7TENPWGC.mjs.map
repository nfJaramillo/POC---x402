{"version":3,"sources":["../../src/facilitator/facilitator.ts"],"sourcesContent":["import { verify as verifyExact, settle as settleExact } from \"../schemes/exact/evm\";\r\nimport { SupportedEVMNetworks } from \"../types/shared\";\r\nimport { ConnectedClient, SignerWallet } from \"../types/shared/evm\";\r\nimport {\r\n  PaymentPayload,\r\n  PaymentRequirements,\r\n  SettleResponse,\r\n  VerifyResponse,\r\n} from \"../types/verify\";\r\nimport { Chain, Transport, Account } from \"viem\";\r\n\r\n/**\r\n * Verifies a payment payload against the required payment details regardless of the scheme\r\n * this function wraps all verify functions for each specific scheme\r\n *\r\n * @param client - The public client used for blockchain interactions\r\n * @param payload - The signed payment payload containing transfer parameters and signature\r\n * @param paymentRequirements - The payment requirements that the payload must satisfy\r\n * @returns A ValidPaymentRequest indicating if the payment is valid and any invalidation reason\r\n */\r\nexport async function verify<\r\n  transport extends Transport,\r\n  chain extends Chain,\r\n  account extends Account | undefined,\r\n>(\r\n  client: ConnectedClient<transport, chain, account>,\r\n  payload: PaymentPayload,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<VerifyResponse> {\r\n  if (\r\n    paymentRequirements.scheme == \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    const valid = await verifyExact(client, payload, paymentRequirements);\r\n    return valid;\r\n  }\r\n  return {\r\n    isValid: false,\r\n    invalidReason: \"invalid_scheme\",\r\n    payer: payload.payload.authorization.from,\r\n  };\r\n}\r\n\r\n/**\r\n * Settles a payment payload against the required payment details regardless of the scheme\r\n * this function wraps all settle functions for each specific scheme\r\n *\r\n * @param client - The signer wallet used for blockchain interactions\r\n * @param payload - The signed payment payload containing transfer parameters and signature\r\n * @param paymentRequirements - The payment requirements that the payload must satisfy\r\n * @returns A SettleResponse indicating if the payment is settled and any settlement reason\r\n */\r\nexport async function settle<transport extends Transport, chain extends Chain>(\r\n  client: SignerWallet<chain, transport>,\r\n  payload: PaymentPayload,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<SettleResponse> {\r\n  if (\r\n    paymentRequirements.scheme == \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    return settleExact(client, payload, paymentRequirements);\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    errorReason: \"invalid_scheme\",\r\n    transaction: \"\",\r\n    network: paymentRequirements.network,\r\n    payer: payload.payload.authorization.from,\r\n  };\r\n}\r\n\r\nexport type Supported = {\r\n  x402Version: number;\r\n  kind: {\r\n    scheme: string;\r\n    networkId: string;\r\n  }[];\r\n};\r\n"],"mappings":";;;;;;;;;AAoBA,eAAsBA,QAKpB,QACA,SACA,qBACyB;AACzB,MACE,oBAAoB,UAAU,WAC9B,qBAAqB,SAAS,oBAAoB,OAAO,GACzD;AACA,UAAM,QAAQ,MAAM,OAAY,QAAQ,SAAS,mBAAmB;AACpE,WAAO;AAAA,EACT;AACA,SAAO;AAAA,IACL,SAAS;AAAA,IACT,eAAe;AAAA,IACf,OAAO,QAAQ,QAAQ,cAAc;AAAA,EACvC;AACF;AAWA,eAAsBC,QACpB,QACA,SACA,qBACyB;AACzB,MACE,oBAAoB,UAAU,WAC9B,qBAAqB,SAAS,oBAAoB,OAAO,GACzD;AACA,WAAO,OAAY,QAAQ,SAAS,mBAAmB;AAAA,EACzD;AAEA,SAAO;AAAA,IACL,SAAS;AAAA,IACT,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS,oBAAoB;AAAA,IAC7B,OAAO,QAAQ,QAAQ,cAAc;AAAA,EACvC;AACF;","names":["verify","settle"]}