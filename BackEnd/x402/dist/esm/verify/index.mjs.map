{"version":3,"sources":["../../../src/verify/useFacilitator.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { toJsonSafe } from \"../shared\";\r\nimport { FacilitatorConfig } from \"../types\";\r\nimport {\r\n  PaymentPayload,\r\n  PaymentRequirements,\r\n  SettleResponse,\r\n  VerifyResponse,\r\n} from \"../types/verify\";\r\n\r\nconst DEFAULT_FACILITATOR_URL = \"https://x402.org/facilitator\";\r\n\r\nexport type CreateHeaders = () => Promise<{\r\n  verify: Record<string, string>;\r\n  settle: Record<string, string>;\r\n}>;\r\n\r\n/**\r\n * Creates a facilitator client for interacting with the X402 payment facilitator service\r\n *\r\n * @param facilitator - The facilitator config to use. If not provided, the default facilitator will be used.\r\n * @returns An object containing verify and settle functions for interacting with the facilitator\r\n */\r\nexport function useFacilitator(facilitator?: FacilitatorConfig) {\r\n  /**\r\n   * Verifies a payment payload with the facilitator service\r\n   *\r\n   * @param payload - The payment payload to verify\r\n   * @param paymentRequirements - The payment requirements to verify against\r\n   * @returns A promise that resolves to the verification response\r\n   */\r\n  async function verify(\r\n    payload: PaymentPayload,\r\n    paymentRequirements: PaymentRequirements,\r\n  ): Promise<VerifyResponse> {\r\n    const url = facilitator?.url || DEFAULT_FACILITATOR_URL;\r\n\r\n    const res = await axios.post(\r\n      `${url}/verify`,\r\n      {\r\n        x402Version: payload.x402Version,\r\n        paymentPayload: toJsonSafe(payload),\r\n        paymentRequirements: toJsonSafe(paymentRequirements),\r\n      },\r\n      {\r\n        headers: facilitator?.createAuthHeaders\r\n          ? (await facilitator.createAuthHeaders()).verify\r\n          : undefined,\r\n      },\r\n    );\r\n\r\n    if (res.status !== 200) {\r\n      throw new Error(`Failed to verify payment: ${res.statusText}`);\r\n    }\r\n\r\n    return res.data as VerifyResponse;\r\n  }\r\n\r\n  /**\r\n   * Settles a payment with the facilitator service\r\n   *\r\n   * @param payload - The payment payload to settle\r\n   * @param paymentRequirements - The payment requirements for the settlement\r\n   * @returns A promise that resolves to the settlement response\r\n   */\r\n  async function settle(\r\n    payload: PaymentPayload,\r\n    paymentRequirements: PaymentRequirements,\r\n  ): Promise<SettleResponse> {\r\n    const url = facilitator?.url || DEFAULT_FACILITATOR_URL;\r\n\r\n    const res = await axios.post(\r\n      `${url}/settle`,\r\n      {\r\n        x402Version: payload.x402Version,\r\n        paymentPayload: toJsonSafe(payload),\r\n        paymentRequirements: toJsonSafe(paymentRequirements),\r\n      },\r\n      {\r\n        headers: facilitator?.createAuthHeaders\r\n          ? (await facilitator.createAuthHeaders()).settle\r\n          : undefined,\r\n      },\r\n    );\r\n\r\n    if (res.status !== 200) {\r\n      throw new Error(`Failed to settle payment: ${res.statusText}`);\r\n    }\r\n\r\n    return res.data as SettleResponse;\r\n  }\r\n\r\n  return { verify, settle };\r\n}\r\n\r\nexport const { verify, settle } = useFacilitator();\r\n"],"mappings":";;;;;;AAAA,OAAO,WAAW;AAUlB,IAAM,0BAA0B;AAazB,SAAS,eAAe,aAAiC;AAQ9D,iBAAeA,QACb,SACA,qBACyB;AACzB,UAAM,OAAM,2CAAa,QAAO;AAEhC,UAAM,MAAM,MAAM,MAAM;AAAA,MACtB,GAAG,GAAG;AAAA,MACN;AAAA,QACE,aAAa,QAAQ;AAAA,QACrB,gBAAgB,WAAW,OAAO;AAAA,QAClC,qBAAqB,WAAW,mBAAmB;AAAA,MACrD;AAAA,MACA;AAAA,QACE,UAAS,2CAAa,sBACjB,MAAM,YAAY,kBAAkB,GAAG,SACxC;AAAA,MACN;AAAA,IACF;AAEA,QAAI,IAAI,WAAW,KAAK;AACtB,YAAM,IAAI,MAAM,6BAA6B,IAAI,UAAU,EAAE;AAAA,IAC/D;AAEA,WAAO,IAAI;AAAA,EACb;AASA,iBAAeC,QACb,SACA,qBACyB;AACzB,UAAM,OAAM,2CAAa,QAAO;AAEhC,UAAM,MAAM,MAAM,MAAM;AAAA,MACtB,GAAG,GAAG;AAAA,MACN;AAAA,QACE,aAAa,QAAQ;AAAA,QACrB,gBAAgB,WAAW,OAAO;AAAA,QAClC,qBAAqB,WAAW,mBAAmB;AAAA,MACrD;AAAA,MACA;AAAA,QACE,UAAS,2CAAa,sBACjB,MAAM,YAAY,kBAAkB,GAAG,SACxC;AAAA,MACN;AAAA,IACF;AAEA,QAAI,IAAI,WAAW,KAAK;AACtB,YAAM,IAAI,MAAM,6BAA6B,IAAI,UAAU,EAAE;AAAA,IAC/D;AAEA,WAAO,IAAI;AAAA,EACb;AAEA,SAAO,EAAE,QAAAD,SAAQ,QAAAC,QAAO;AAC1B;AAEO,IAAM,EAAE,QAAQ,OAAO,IAAI,eAAe;","names":["verify","settle"]}