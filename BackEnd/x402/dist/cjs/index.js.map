{"version":3,"sources":["../../src/index.ts","../../src/types/shared/evm/config.ts","../../src/types/shared/evm/eip3009.ts","../../src/types/shared/evm/erc20PermitABI.ts","../../src/types/shared/evm/wallet.ts","../../src/schemes/exact/evm/sign.ts","../../src/shared/base64.ts","../../src/types/shared/money.ts","../../src/types/shared/network.ts","../../src/shared/network.ts","../../src/shared/cdp.ts","../../src/types/verify/x402Specs.ts","../../src/types/verify/facilitator.ts","../../src/shared/evm/usdc.ts","../../src/shared/evm/erc20.ts","../../src/schemes/exact/evm/utils/paymentUtils.ts","../../src/schemes/exact/evm/client.ts","../../src/client/createPaymentHeader.ts","../../src/client/preparePaymentHeader.ts","../../src/client/selectPaymentRequirements.ts","../../src/client/signPaymentHeader.ts","../../src/schemes/exact/evm/facilitator.ts","../../src/schemes/exact/index.ts","../../src/facilitator/facilitator.ts"],"sourcesContent":["export * from \"./client\";\r\nexport * from \"./facilitator\";\r\n\r\nexport const x402Version = 1;\r\n","import { Address } from \"viem\";\r\n\r\nexport const config: Record<string, ChainConfig> = {\r\n  \"84532\": {\r\n    usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\r\n    usdcName: \"USDC\",\r\n  },\r\n  \"8453\": {\r\n    usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\r\n    usdcName: \"USDC\",\r\n  },\r\n};\r\n\r\nexport type ChainConfig = {\r\n  usdcAddress: Address;\r\n  usdcName: string;\r\n};\r\n","export const authorizationTypes = {\r\n  TransferWithAuthorization: [\r\n    { name: \"from\", type: \"address\" },\r\n    { name: \"to\", type: \"address\" },\r\n    { name: \"value\", type: \"uint256\" },\r\n    { name: \"validAfter\", type: \"uint256\" },\r\n    { name: \"validBefore\", type: \"uint256\" },\r\n    { name: \"nonce\", type: \"bytes32\" },\r\n  ],\r\n};\r\n\r\nexport const authorizationPrimaryType = \"TransferWithAuthorization\";\r\n","export const usdcABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"authorizer\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"nonce\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"AuthorizationCanceled\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"authorizer\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"nonce\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"AuthorizationUsed\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"_account\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"Blacklisted\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"newBlacklister\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"BlacklisterChanged\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"burner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"amount\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Burn\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"newMasterMinter\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"MasterMinterChanged\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"minter\",\r\n        type: \"address\",\r\n      },\r\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"amount\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Mint\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"minter\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"minterAllowedAmount\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"MinterConfigured\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"oldMinter\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"MinterRemoved\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: \"address\",\r\n        name: \"previousOwner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"address\",\r\n        name: \"newOwner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"OwnershipTransferred\",\r\n    type: \"event\",\r\n  },\r\n  { anonymous: false, inputs: [], name: \"Pause\", type: \"event\" },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"newAddress\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"PauserChanged\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"newRescuer\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"RescuerChanged\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { indexed: true, internalType: \"address\", name: \"to\", type: \"address\" },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"_account\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"UnBlacklisted\",\r\n    type: \"event\",\r\n  },\r\n  { anonymous: false, inputs: [], name: \"Unpause\", type: \"event\" },\r\n  {\r\n    inputs: [],\r\n    name: \"CANCEL_AUTHORIZATION_TYPEHASH\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n    ],\r\n    name: \"authorizationState\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\r\n    name: \"blacklist\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"blacklister\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"_amount\", type: \"uint256\" }],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\r\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\r\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\r\n    ],\r\n    name: \"cancelAuthorization\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"authorizer\", type: \"address\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\r\n    ],\r\n    name: \"cancelAuthorization\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"minter\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"minterAllowedAmount\", type: \"uint256\" },\r\n    ],\r\n    name: \"configureMinter\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"currency\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"decrement\", type: \"uint256\" },\r\n    ],\r\n    name: \"decreaseAllowance\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"increment\", type: \"uint256\" },\r\n    ],\r\n    name: \"increaseAllowance\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"string\", name: \"tokenName\", type: \"string\" },\r\n      { internalType: \"string\", name: \"tokenSymbol\", type: \"string\" },\r\n      { internalType: \"string\", name: \"tokenCurrency\", type: \"string\" },\r\n      { internalType: \"uint8\", name: \"tokenDecimals\", type: \"uint8\" },\r\n      { internalType: \"address\", name: \"newMasterMinter\", type: \"address\" },\r\n      { internalType: \"address\", name: \"newPauser\", type: \"address\" },\r\n      { internalType: \"address\", name: \"newBlacklister\", type: \"address\" },\r\n      { internalType: \"address\", name: \"newOwner\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"string\", name: \"newName\", type: \"string\" }],\r\n    name: \"initializeV2\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"lostAndFound\", type: \"address\" }],\r\n    name: \"initializeV2_1\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"address[]\",\r\n        name: \"accountsToBlacklist\",\r\n        type: \"address[]\",\r\n      },\r\n      { internalType: \"string\", name: \"newSymbol\", type: \"string\" },\r\n    ],\r\n    name: \"initializeV2_2\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\r\n    name: \"isBlacklisted\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\r\n    name: \"isMinter\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"masterMinter\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"_to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\r\n    name: \"minterAllowance\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\r\n    name: \"nonces\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"owner\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"pause\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"paused\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"pauser\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"deadline\", type: \"uint256\" },\r\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\r\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\r\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\r\n    ],\r\n    name: \"receiveWithAuthorization\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\r\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\r\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\r\n    ],\r\n    name: \"receiveWithAuthorization\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"minter\", type: \"address\" }],\r\n    name: \"removeMinter\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"contract IERC20\",\r\n        name: \"tokenContract\",\r\n        type: \"address\",\r\n      },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n    ],\r\n    name: \"rescueERC20\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"rescuer\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\r\n    name: \"transferOwnership\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n      { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\r\n    ],\r\n    name: \"transferWithAuthorization\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"from\", type: \"address\" },\r\n      { internalType: \"address\", name: \"to\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validAfter\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"validBefore\", type: \"uint256\" },\r\n      { internalType: \"bytes32\", name: \"nonce\", type: \"bytes32\" },\r\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\r\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\r\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\r\n    ],\r\n    name: \"transferWithAuthorization\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_account\", type: \"address\" }],\r\n    name: \"unBlacklist\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"unpause\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_newBlacklister\", type: \"address\" }],\r\n    name: \"updateBlacklister\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_newMasterMinter\", type: \"address\" }],\r\n    name: \"updateMasterMinter\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"_newPauser\", type: \"address\" }],\r\n    name: \"updatePauser\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newRescuer\", type: \"address\" }],\r\n    name: \"updateRescuer\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    stateMutability: \"pure\",\r\n    type: \"function\",\r\n  },\r\n] as const;\r\n","import { createPublicClient, createWalletClient, http, publicActions } from \"viem\";\r\nimport type {\r\n  Chain,\r\n  Transport,\r\n  Client,\r\n  Account,\r\n  RpcSchema,\r\n  PublicActions,\r\n  WalletActions,\r\n  PublicClient,\r\n} from \"viem\";\r\nimport { baseSepolia } from \"viem/chains\";\r\nimport { privateKeyToAccount } from \"viem/accounts\";\r\nimport { Hex } from \"viem\";\r\n\r\n// Create a public client for reading data\r\nexport type SignerWallet<\r\n  chain extends Chain = Chain,\r\n  transport extends Transport = Transport,\r\n  account extends Account = Account,\r\n> = Client<\r\n  transport,\r\n  chain,\r\n  account,\r\n  RpcSchema,\r\n  PublicActions<transport, chain, account> & WalletActions<chain, account>\r\n>;\r\n\r\nexport type ConnectedClient<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain,\r\n  account extends Account | undefined = undefined,\r\n> = PublicClient<transport, chain, account>;\r\n\r\n/**\r\n * Creates a public client configured for the Base Sepolia testnet\r\n *\r\n * @returns A public client instance connected to Base Sepolia\r\n */\r\nexport function createClientSepolia(): ConnectedClient<Transport, typeof baseSepolia, undefined> {\r\n  return createPublicClient({\r\n    chain: baseSepolia,\r\n    transport: http(),\r\n  }).extend(publicActions);\r\n}\r\n\r\n/**\r\n * Creates a wallet client configured for the Base Sepolia testnet with a private key\r\n *\r\n * @param privateKey - The private key to use for signing transactions\r\n * @returns A wallet client instance connected to Base Sepolia with the provided private key\r\n */\r\nexport function createSignerSepolia(privateKey: Hex): SignerWallet<typeof baseSepolia> {\r\n  return createWalletClient({\r\n    chain: baseSepolia,\r\n    transport: http(),\r\n    account: privateKeyToAccount(privateKey),\r\n  }).extend(publicActions);\r\n}\r\n\r\n/**\r\n * Checks if a wallet is a signer wallet\r\n *\r\n * @param wallet - The wallet to check\r\n * @returns True if the wallet is a signer wallet, false otherwise\r\n */\r\nexport function isSignerWallet<\r\n  TChain extends Chain = Chain,\r\n  TTransport extends Transport = Transport,\r\n  TAccount extends Account = Account,\r\n>(\r\n  wallet: SignerWallet<TChain, TTransport, TAccount> | Account,\r\n): wallet is SignerWallet<TChain, TTransport, TAccount> {\r\n  return \"chain\" in wallet && \"transport\" in wallet;\r\n}\r\n\r\n/**\r\n * Checks if a wallet is an account\r\n *\r\n * @param wallet - The wallet to check\r\n * @returns True if the wallet is an account, false otherwise\r\n */\r\nexport function isAccount(wallet: SignerWallet | Account): wallet is Account {\r\n  return \"address\" in wallet && \"type\" in wallet;\r\n}\r\n","import { getRandomValues } from \"crypto\";\r\nimport { Account, Address, Chain, Hex, toHex, Transport } from \"viem\";\r\nimport { getNetworkId } from \"../../../shared\";\r\nimport {\r\n  authorizationTypes,\r\n  isAccount,\r\n  isSignerWallet,\r\n  SignerWallet,\r\n} from \"../../../types/shared/evm\";\r\nimport { ExactEvmPayloadAuthorization, PaymentRequirements } from \"../../../types/verify\";\r\n\r\n/**\r\n * Signs an EIP-3009 authorization for USDC transfer\r\n *\r\n * @param walletClient - The wallet client that will sign the authorization\r\n * @param params - The authorization parameters containing transfer details\r\n * @param params.from - The address tokens will be transferred from\r\n * @param params.to - The address tokens will be transferred to\r\n * @param params.value - The amount of USDC tokens to transfer (in base units)\r\n * @param params.validAfter - Unix timestamp after which the authorization becomes valid\r\n * @param params.validBefore - Unix timestamp before which the authorization is valid\r\n * @param params.nonce - Random 32-byte nonce to prevent replay attacks\r\n * @param paymentRequirements - The payment requirements containing asset and network information\r\n * @param paymentRequirements.asset - The address of the USDC contract\r\n * @param paymentRequirements.network - The network where the USDC contract exists\r\n * @param paymentRequirements.extra - The extra information containing the name and version of the ERC20 contract\r\n * @returns The signature for the authorization\r\n */\r\nexport async function signAuthorization<transport extends Transport, chain extends Chain>(\r\n  walletClient: SignerWallet<chain, transport> | Account,\r\n  { from, to, value, validAfter, validBefore, nonce }: ExactEvmPayloadAuthorization,\r\n  { asset, network, extra }: PaymentRequirements,\r\n): Promise<{ signature: Hex }> {\r\n  const chainId = getNetworkId(network);\r\n  const name = extra?.name;\r\n  const version = extra?.version;\r\n  const account = isSignerWallet(walletClient) ? walletClient.account : walletClient;\r\n\r\n  const data = {\r\n    account,\r\n    types: authorizationTypes,\r\n    domain: {\r\n      name,\r\n      version,\r\n      chainId,\r\n      verifyingContract: asset as Address,\r\n    },\r\n    primaryType: \"TransferWithAuthorization\" as const,\r\n    message: {\r\n      from,\r\n      to,\r\n      value,\r\n      validAfter,\r\n      validBefore,\r\n      nonce: nonce,\r\n    },\r\n  };\r\n\r\n  if (isSignerWallet(walletClient)) {\r\n    const signature = await walletClient.signTypedData(data);\r\n    return {\r\n      signature,\r\n    };\r\n  } else if (isAccount(walletClient) && walletClient.signTypedData) {\r\n    const signature = await walletClient.signTypedData(data);\r\n    return {\r\n      signature,\r\n    };\r\n  } else {\r\n    throw new Error(\"Invalid wallet client provided does not support signTypedData\");\r\n  }\r\n}\r\n\r\n/**\r\n * Generates a random 32-byte nonce for use in authorization signatures\r\n *\r\n * @returns A random 32-byte nonce as a hex string\r\n */\r\nexport function createNonce(): Hex {\r\n  return toHex(getRandomValues(new Uint8Array(32)));\r\n}\r\n","/**\r\n * Encodes a string to base64 format\r\n *\r\n * @param data - The string to be encoded to base64\r\n * @returns The base64 encoded string\r\n */\r\nexport function safeBase64Encode(data: string): string {\r\n  return Buffer.from(data).toString(\"base64\");\r\n}\r\n\r\n/**\r\n * Decodes a base64 string back to its original format\r\n *\r\n * @param data - The base64 encoded string to be decoded\r\n * @returns The decoded string in UTF-8 format\r\n */\r\nexport function safeBase64Decode(data: string): string {\r\n  return Buffer.from(data, \"base64\").toString(\"utf-8\");\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const moneySchema = z\r\n  .union([z.string().transform(x => x.replace(/[^0-9.-]+/g, \"\")), z.number()])\r\n  .pipe(z.coerce.number().min(0.0001).max(999999999));\r\n\r\nexport type Money = z.input<typeof moneySchema>;\r\n","import { z } from \"zod\";\r\n\r\nexport const NetworkSchema = z.enum([\"base-sepolia\", \"base\"]);\r\nexport type Network = z.infer<typeof NetworkSchema>;\r\n\r\nexport const SupportedEVMNetworks: Network[] = [\"base-sepolia\", \"base\"];\r\nexport const EvmNetworkToChainId = new Map<Network, number>([\r\n  [\"base-sepolia\", 84532],\r\n  [\"base\", 8453],\r\n]);\r\n\r\nexport const ChainIdToNetwork = Object.fromEntries(\r\n  SupportedEVMNetworks.map(network => [EvmNetworkToChainId.get(network), network]),\r\n) as Record<number, Network>;\r\n","import { EvmNetworkToChainId, Network } from \"../types/shared\";\r\n\r\n/**\r\n * Converts a network name to its corresponding chain ID\r\n *\r\n * @param network - The network name to convert to a chain ID\r\n * @returns The chain ID for the specified network\r\n * @throws Error if the network is not supported\r\n */\r\nexport function getNetworkId(network: Network): number {\r\n  if (EvmNetworkToChainId.has(network)) {\r\n    return EvmNetworkToChainId.get(network)!;\r\n  }\r\n  // TODO: Solana\r\n  throw new Error(`Unsupported network: ${network}`);\r\n}\r\n","import { generateJwt } from \"@coinbase/cdp-sdk/auth\";\r\nimport { version } from \"../version\";\r\n\r\nconst SDK_VERSION = \"1.1.1\";\r\n\r\n/**\r\n * Creates an authorization header for a request to the Coinbase API.\r\n *\r\n * @param apiKeyId - The api key ID\r\n * @param apiKeySecret - The api key secret\r\n * @param requestHost - The host for the request (e.g. 'https://x402.org/facilitator')\r\n * @param requestPath - The path for the request (e.g. '/verify')\r\n * @returns The authorization header string\r\n */\r\nexport async function createAuthHeader(\r\n  apiKeyId: string,\r\n  apiKeySecret: string,\r\n  requestHost: string,\r\n  requestPath: string,\r\n) {\r\n  const jwt = await generateJwt({\r\n    apiKeyId,\r\n    apiKeySecret,\r\n    requestMethod: \"POST\",\r\n    requestHost,\r\n    requestPath,\r\n  });\r\n  return `Bearer ${jwt}`;\r\n}\r\n\r\n/**\r\n * Creates a correlation header for a request to the Coinbase API.\r\n *\r\n * @returns The correlation header string\r\n */\r\nexport function createCorrelationHeader(): string {\r\n  const data: Record<string, string> = {\r\n    sdk_version: SDK_VERSION,\r\n    sdk_language: \"typescript\",\r\n    source: \"x402\",\r\n    source_version: version,\r\n  };\r\n  return Object.keys(data)\r\n    .map(key => `${key}=${encodeURIComponent(data[key])}`)\r\n    .join(\",\");\r\n}\r\n","import { z } from \"zod\";\r\nimport { NetworkSchema } from \"../shared\";\r\n// Constants\r\nconst EvmMaxAtomicUnits = 18;\r\nconst EvmAddressRegex = /^0x[0-9a-fA-F]{40}$/;\r\nconst MixedAddressRegex = /^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$/;\r\nconst HexEncoded64ByteRegex = /^0x[0-9a-fA-F]{64}$/;\r\nconst EvmSignatureRegex = /^0x[0-9a-fA-F]{130}$/;\r\n// Enums\r\nexport const schemes = [\"exact\"] as const;\r\nexport const x402Versions = [1] as const;\r\nexport const ErrorReasons = [\"insufficient_funds\", \"invalid_scheme\", \"invalid_network\"] as const;\r\n// Refiners\r\nconst isInteger = (value: string) => Number.isInteger(Number(value)) && Number(value) >= 0;\r\nconst hasMaxLength = (maxLength: number) => (value: string) => value.length <= maxLength;\r\n\r\n// x402PaymentRequirements\r\nexport const PaymentRequirementsSchema = z.object({\r\n  scheme: z.enum(schemes),\r\n  network: NetworkSchema,\r\n  maxAmountRequired: z.string().refine(isInteger),\r\n  resource: z.string().url(),\r\n  description: z.string(),\r\n  mimeType: z.string(),\r\n  outputSchema: z.record(z.any()).optional(),\r\n  payTo: z.string().regex(MixedAddressRegex),\r\n  maxTimeoutSeconds: z.number().int(),\r\n  asset: z.string().regex(MixedAddressRegex),\r\n  extra: z.record(z.any()).optional(),\r\n});\r\nexport type PaymentRequirements = z.infer<typeof PaymentRequirementsSchema>;\r\n\r\n// x402ExactEvmPayload\r\nexport const ExactEvmPayloadAuthorizationSchema = z.object({\r\n  from: z.string().regex(EvmAddressRegex),\r\n  to: z.string().regex(EvmAddressRegex),\r\n  value: z.string().refine(isInteger).refine(hasMaxLength(EvmMaxAtomicUnits)),\r\n  validAfter: z.string().refine(isInteger),\r\n  validBefore: z.string().refine(isInteger),\r\n  nonce: z.string().regex(HexEncoded64ByteRegex),\r\n});\r\nexport type ExactEvmPayloadAuthorization = z.infer<typeof ExactEvmPayloadAuthorizationSchema>;\r\n\r\nexport const ExactEvmPayloadSchema = z.object({\r\n  signature: z.string().regex(EvmSignatureRegex),\r\n  authorization: ExactEvmPayloadAuthorizationSchema,\r\n});\r\nexport type ExactEvmPayload = z.infer<typeof ExactEvmPayloadSchema>;\r\n\r\n// x402PaymentPayload\r\nexport const PaymentPayloadSchema = z.object({\r\n  x402Version: z.number().refine(val => x402Versions.includes(val as 1)),\r\n  scheme: z.enum(schemes),\r\n  network: NetworkSchema,\r\n  payload: ExactEvmPayloadSchema,\r\n});\r\nexport type PaymentPayload = z.infer<typeof PaymentPayloadSchema>;\r\nexport type UnsignedPaymentPayload = Omit<PaymentPayload, \"payload\"> & {\r\n  payload: Omit<ExactEvmPayload, \"signature\"> & { signature: undefined };\r\n};\r\n\r\n// x402VerifyResponse\r\nexport const VerifyResponseSchema = z.object({\r\n  isValid: z.boolean(),\r\n  invalidReason: z.enum(ErrorReasons).optional(),\r\n  payer: z.string().regex(MixedAddressRegex).optional(),\r\n});\r\nexport type VerifyResponse = z.infer<typeof VerifyResponseSchema>;\r\n\r\n// x402SettleResponse\r\nexport const SettleResponseSchema = z.object({\r\n  success: z.boolean(),\r\n  errorReason: z.enum(ErrorReasons).optional(),\r\n  payer: z.string().regex(MixedAddressRegex).optional(),\r\n  transaction: z.string().regex(MixedAddressRegex),\r\n  network: NetworkSchema,\r\n});\r\nexport type SettleResponse = z.infer<typeof SettleResponseSchema>;\r\n\r\n// x402SupportedPaymentKind\r\nexport const SupportedPaymentKindSchema = z.object({\r\n  x402Version: z.number().refine(val => x402Versions.includes(val as 1)),\r\n  scheme: z.enum(schemes),\r\n  network: NetworkSchema,\r\n});\r\nexport type SupportedPaymentKind = z.infer<typeof SupportedPaymentKindSchema>;\r\n\r\n// x402SupportedPaymentKindsResponse\r\nexport const SupportedPaymentKindsResponseSchema = z.object({\r\n  kinds: z.array(SupportedPaymentKindSchema),\r\n});\r\nexport type SupportedPaymentKindsResponse = z.infer<typeof SupportedPaymentKindsResponseSchema>;\r\n","import { z } from \"zod\";\r\nimport { safeBase64Decode, safeBase64Encode } from \"../../shared\";\r\nimport { PaymentRequirementsSchema, SettleResponse } from \"./x402Specs\";\r\n\r\nexport const facilitatorRequestSchema = z.object({\r\n  paymentHeader: z.string(),\r\n  paymentRequirements: PaymentRequirementsSchema,\r\n});\r\n\r\nexport type FacilitatorRequest = z.infer<typeof facilitatorRequestSchema>;\r\n\r\n/**\r\n * Encodes a settlement response into a base64 header string\r\n *\r\n * @param response - The settlement response to encode\r\n * @returns A base64 encoded string containing the settlement response\r\n */\r\nexport function settleResponseHeader(response: SettleResponse): string {\r\n  return safeBase64Encode(JSON.stringify(response));\r\n}\r\n\r\n/**\r\n * Decodes a base64 header string back into a settlement response\r\n *\r\n * @param header - The base64 encoded settlement response header\r\n * @returns The decoded settlement response object\r\n */\r\nexport function settleResponseFromHeader(header: string): SettleResponse {\r\n  const decoded = safeBase64Decode(header);\r\n  return JSON.parse(decoded) as SettleResponse;\r\n}\r\n","import { Account, Address, Chain, Client, Transport } from \"viem\";\r\nimport { config } from \"../../types/shared/evm/config\";\r\nimport { usdcABI as abi } from \"../../types/shared/evm/erc20PermitABI\";\r\nimport { ConnectedClient } from \"../../types/shared/evm/wallet\";\r\n\r\n/**\r\n * Gets the USDC contract address for the current chain from the client\r\n *\r\n * @param client - The Viem client instance connected to the blockchain\r\n * @returns The USDC contract address for the current chain\r\n */\r\nexport function getUsdcAddress<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined = undefined,\r\n  account extends Account | undefined = undefined,\r\n>(client: Client<transport, chain, account>): Address {\r\n  return config[client.chain!.id.toString()].usdcAddress as Address;\r\n}\r\n\r\n/**\r\n * Gets the USDC contract address for a specific chain ID\r\n *\r\n * @param chainId - The chain ID to get the USDC contract address for\r\n * @returns The USDC contract address for the specified chain\r\n */\r\nexport function getUsdcAddressForChain(chainId: number): Address {\r\n  return config[chainId.toString()].usdcAddress as Address;\r\n}\r\n\r\n// Cache for storing the version value\r\nlet versionCache: string | null = null;\r\n\r\n/**\r\n * Gets the version of the USDC contract, using a cache to avoid repeated calls\r\n *\r\n * @param client - The Viem client instance connected to the blockchain\r\n * @returns A promise that resolves to the USDC contract version string\r\n */\r\nexport async function getVersion<\r\n  transport extends Transport,\r\n  chain extends Chain,\r\n  account extends Account | undefined = undefined,\r\n>(client: ConnectedClient<transport, chain, account>): Promise<string> {\r\n  // Return cached version if available\r\n  if (versionCache !== null) {\r\n    return versionCache;\r\n  }\r\n\r\n  // Fetch and cache version if not available\r\n  const version = await client.readContract({\r\n    address: getUsdcAddress(client),\r\n    abi,\r\n    functionName: \"version\",\r\n  });\r\n  versionCache = version as string;\r\n  return versionCache;\r\n}\r\n\r\n/**\r\n * Gets the USDC balance for a specific address\r\n *\r\n * @param client - The Viem client instance connected to the blockchain\r\n * @param address - The address to check the USDC balance for\r\n * @returns A promise that resolves to the USDC balance as a bigint\r\n */\r\nexport async function getUSDCBalance<\r\n  transport extends Transport,\r\n  chain extends Chain,\r\n  account extends Account | undefined = undefined,\r\n>(client: ConnectedClient<transport, chain, account>, address: Address): Promise<bigint> {\r\n  const balance = await client.readContract({\r\n    address: getUsdcAddressForChain(client.chain!.id),\r\n    abi,\r\n    functionName: \"balanceOf\",\r\n    args: [address],\r\n  });\r\n  return balance as bigint;\r\n}\r\n","import { Account, Address, Chain, Transport } from \"viem\";\r\nimport { usdcABI as erc20PermitABI } from \"../../types/shared/evm/erc20PermitABI\";\r\nimport { ConnectedClient } from \"../../types/shared/evm/wallet\";\r\n\r\n/**\r\n * Gets the USDC balance for a specific address\r\n *\r\n * @param client - The Viem client instance connected to the blockchain\r\n * @param erc20Address - The address of the ERC20 contract\r\n * @param address - The address to check the USDC balance for\r\n * @returns A promise that resolves to the USDC balance as a bigint\r\n */\r\nexport async function getERC20Balance<\r\n  transport extends Transport,\r\n  chain extends Chain,\r\n  account extends Account | undefined = undefined,\r\n>(\r\n  client: ConnectedClient<transport, chain, account>,\r\n  erc20Address: Address,\r\n  address: Address,\r\n): Promise<bigint> {\r\n  const balance = await client.readContract({\r\n    address: erc20Address,\r\n    abi: erc20PermitABI,\r\n    functionName: \"balanceOf\",\r\n    args: [address],\r\n  });\r\n  return balance as bigint;\r\n}\r\n","import { safeBase64Encode, safeBase64Decode } from \"../../../../shared\";\r\nimport { PaymentPayload, PaymentPayloadSchema } from \"../../../../types/verify\";\r\n\r\n/**\r\n * Encodes a payment payload into a base64 string, ensuring bigint values are properly stringified\r\n *\r\n * @param payment - The payment payload to encode\r\n * @returns A base64 encoded string representation of the payment payload\r\n */\r\nexport function encodePayment(payment: PaymentPayload): string {\r\n  const safe = {\r\n    ...payment,\r\n    payload: {\r\n      ...payment.payload,\r\n      authorization: Object.fromEntries(\r\n        Object.entries(payment.payload.authorization).map(([key, value]) => [\r\n          key,\r\n          typeof value === \"bigint\" ? (value as bigint).toString() : value,\r\n        ]),\r\n      ),\r\n    },\r\n  };\r\n  return safeBase64Encode(JSON.stringify(safe));\r\n}\r\n\r\n/**\r\n * Decodes a base64 encoded payment string back into a PaymentPayload object\r\n *\r\n * @param payment - The base64 encoded payment string to decode\r\n * @returns The decoded and validated PaymentPayload object\r\n */\r\nexport function decodePayment(payment: string): PaymentPayload {\r\n  const decoded = safeBase64Decode(payment);\r\n  const parsed = JSON.parse(decoded);\r\n\r\n  const obj = {\r\n    ...parsed,\r\n    payload: {\r\n      signature: parsed.payload.signature,\r\n      authorization: {\r\n        ...parsed.payload.authorization,\r\n        value: parsed.payload.authorization.value,\r\n        validAfter: parsed.payload.authorization.validAfter,\r\n        validBefore: parsed.payload.authorization.validBefore,\r\n      },\r\n    },\r\n  };\r\n\r\n  const validated = PaymentPayloadSchema.parse(obj);\r\n  return validated;\r\n}\r\n","import { Account, Address, Chain, Transport } from \"viem\";\r\nimport { isSignerWallet, SignerWallet } from \"../../../types/shared/evm\";\r\nimport { PaymentPayload, PaymentRequirements, UnsignedPaymentPayload } from \"../../../types/verify\";\r\nimport { createNonce, signAuthorization } from \"./sign\";\r\nimport { encodePayment } from \"./utils/paymentUtils\";\r\n\r\n/**\r\n * Prepares an unsigned payment header with the given sender address and payment requirements.\r\n *\r\n * @param from - The sender's address from which the payment will be made\r\n * @param x402Version - The version of the X402 protocol to use\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @returns An unsigned payment payload containing authorization details\r\n */\r\nexport function preparePaymentHeader(\r\n  from: Address,\r\n  x402Version: number,\r\n  paymentRequirements: PaymentRequirements,\r\n): UnsignedPaymentPayload {\r\n  const nonce = createNonce();\r\n\r\n  const validAfter = BigInt(\r\n    Math.floor(Date.now() / 1000) - 60, // 60 seconds before\r\n  ).toString();\r\n  const validBefore = BigInt(\r\n    Math.floor(Date.now() / 1000 + paymentRequirements.maxTimeoutSeconds),\r\n  ).toString();\r\n\r\n  return {\r\n    x402Version,\r\n    scheme: paymentRequirements.scheme,\r\n    network: paymentRequirements.network,\r\n    payload: {\r\n      signature: undefined,\r\n      authorization: {\r\n        from,\r\n        to: paymentRequirements.payTo as Address,\r\n        value: paymentRequirements.maxAmountRequired,\r\n        validAfter: validAfter.toString(),\r\n        validBefore: validBefore.toString(),\r\n        nonce,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Signs a payment header using the provided client and payment requirements.\r\n *\r\n * @param client - The signer wallet instance used to sign the payment header\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @param unsignedPaymentHeader - The unsigned payment payload to be signed\r\n * @returns A promise that resolves to the signed payment payload\r\n */\r\nexport async function signPaymentHeader<transport extends Transport, chain extends Chain>(\r\n  client: SignerWallet<chain, transport> | Account,\r\n  paymentRequirements: PaymentRequirements,\r\n  unsignedPaymentHeader: UnsignedPaymentPayload,\r\n): Promise<PaymentPayload> {\r\n  const { signature } = await signAuthorization(\r\n    client,\r\n    unsignedPaymentHeader.payload.authorization,\r\n    paymentRequirements,\r\n  );\r\n\r\n  return {\r\n    ...unsignedPaymentHeader,\r\n    payload: {\r\n      ...unsignedPaymentHeader.payload,\r\n      signature,\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a complete payment payload by preparing and signing a payment header.\r\n *\r\n * @param client - The signer wallet instance used to create and sign the payment\r\n * @param x402Version - The version of the X402 protocol to use\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @returns A promise that resolves to the complete signed payment payload\r\n */\r\nexport async function createPayment<transport extends Transport, chain extends Chain>(\r\n  client: SignerWallet<chain, transport> | Account,\r\n  x402Version: number,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<PaymentPayload> {\r\n  const from = isSignerWallet(client) ? client.account!.address : client.address;\r\n  const unsignedPaymentHeader = preparePaymentHeader(from, x402Version, paymentRequirements);\r\n  return signPaymentHeader(client, paymentRequirements, unsignedPaymentHeader);\r\n}\r\n\r\n/**\r\n * Creates and encodes a payment header for the given client and payment requirements.\r\n *\r\n * @param client - The signer wallet instance used to create the payment header\r\n * @param x402Version - The version of the X402 protocol to use\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @returns A promise that resolves to the encoded payment header string\r\n */\r\nexport async function createPaymentHeader(\r\n  client: SignerWallet | Account,\r\n  x402Version: number,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<string> {\r\n  const payment = await createPayment(client, x402Version, paymentRequirements);\r\n  return encodePayment(payment);\r\n}\r\n","import { createPaymentHeader as createPaymentHeaderExactEVM } from \"../schemes/exact/evm/client\";\r\nimport { SupportedEVMNetworks } from \"../types/shared\";\r\nimport { SignerWallet } from \"../types/shared/evm\";\r\nimport { PaymentRequirements } from \"../types/verify\";\r\n\r\n/**\r\n * Creates a payment header based on the provided client and payment requirements.\r\n * \r\n * @param client - The signer wallet instance used to create the payment header\r\n * @param x402Version - The version of the X402 protocol to use\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @returns A promise that resolves to the created payment header string\r\n */\r\nexport async function createPaymentHeader(\r\n  client: SignerWallet,\r\n  x402Version: number,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<string> {\r\n  if (\r\n    paymentRequirements.scheme === \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    return await createPaymentHeaderExactEVM(client, x402Version, paymentRequirements);\r\n  }\r\n\r\n  throw new Error(\"Unsupported scheme\");\r\n}","import { Address } from \"viem\";\r\nimport { preparePaymentHeader as preparePaymentHeaderExactEVM } from \"../schemes/exact/evm/client\";\r\nimport { SupportedEVMNetworks } from \"../types/shared\";\r\nimport { PaymentRequirements, UnsignedPaymentPayload } from \"../types/verify\";\r\n\r\n/**\r\n * Prepares a payment header with the given sender address and payment requirements.\r\n * \r\n * @param from - The sender's address from which the payment will be made\r\n * @param x402Version - The version of the X402 protocol to use\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @returns An unsigned payment payload that can be used to create a payment header\r\n */\r\nexport function preparePaymentHeader(\r\n  from: Address,\r\n  x402Version: number,\r\n  paymentRequirements: PaymentRequirements,\r\n): UnsignedPaymentPayload {\r\n  if (\r\n    paymentRequirements.scheme === \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    return preparePaymentHeaderExactEVM(from, x402Version, paymentRequirements);\r\n  }\r\n\r\n  throw new Error(\"Unsupported scheme\");\r\n}","import { Network, PaymentRequirements } from \"../types\";\r\nimport { getUsdcAddressForChain } from \"../shared/evm\";\r\nimport { getNetworkId } from \"../shared/network\";\r\n\r\n/**\r\n * Default selector for payment requirements.\r\n * Default behavior is to select the first payment requirement that has a USDC asset.\r\n * If no USDC payment requirement is found, the first payment requirement is selected.\r\n * \r\n * @param paymentRequirements - The payment requirements to select from.\r\n * @param network - The network to check against. If not provided, the network will not be checked.\r\n * @param scheme - The scheme to check against. If not provided, the scheme will not be checked.\r\n * @returns The payment requirement that is the most appropriate for the user.\r\n */\r\nexport function selectPaymentRequirements(paymentRequirements: PaymentRequirements[], network?: Network, scheme?: \"exact\"): PaymentRequirements {\r\n  // Sort `base` payment requirements to the front of the list. This is to ensure that base is preferred if available.\r\n  paymentRequirements.sort((a, b) => {\r\n    if (a.network === \"base\" && b.network !== \"base\") {\r\n      return -1;\r\n    }\r\n    if (a.network !== \"base\" && b.network === \"base\") {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  // Filter down to the scheme/network if provided\r\n  const broadlyAcceptedPaymentRequirements = paymentRequirements.filter(requirement => {\r\n    // If the scheme is not provided, we accept any scheme.\r\n    const isExpectedScheme = !scheme || requirement.scheme === scheme;\r\n    // If the chain is not provided, we accept any chain.\r\n    const isExpectedChain = !network || network == requirement.network;\r\n\r\n    return isExpectedScheme && isExpectedChain;\r\n  });\r\n\r\n  // Filter down to USDC requirements\r\n  const usdcRequirements = broadlyAcceptedPaymentRequirements.filter(requirement => {\r\n    // If the address is a USDC address, we return it.\r\n    return requirement.asset === getUsdcAddressForChain(getNetworkId(requirement.network));\r\n  });\r\n\r\n  // Prioritize USDC requirements if available\r\n  if (usdcRequirements.length > 0) {\r\n    return usdcRequirements[0];\r\n  }\r\n\r\n  // If no USDC requirements are found, return the first broadly accepted requirement.\r\n  if (broadlyAcceptedPaymentRequirements.length > 0) {\r\n    return broadlyAcceptedPaymentRequirements[0];\r\n  }\r\n\r\n  // If no matching requirements are found, return the first requirement.\r\n  return paymentRequirements[0];\r\n}\r\n\r\n/**\r\n * Selector for payment requirements.\r\n * \r\n * @param paymentRequirements - The payment requirements to select from.\r\n * @param network - The network to check against. If not provided, the network will not be checked.\r\n * @param scheme - The scheme to check against. If not provided, the scheme will not be checked.\r\n * @returns The payment requirement that is the most appropriate for the user.\r\n */\r\nexport type PaymentRequirementsSelector = (paymentRequirements: PaymentRequirements[], network?: Network, scheme?: \"exact\") => PaymentRequirements;\r\n","import { signPaymentHeader as signPaymentHeaderExactEVM } from \"../schemes/exact/evm/client\";\r\nimport { encodePayment } from \"../schemes/exact/evm/utils/paymentUtils\";\r\nimport { SupportedEVMNetworks } from \"../types/shared\";\r\nimport { SignerWallet } from \"../types/shared/evm\";\r\nimport { PaymentRequirements, UnsignedPaymentPayload } from \"../types/verify\";\r\n\r\n/**\r\n * Signs a payment header using the provided client and payment requirements.\r\n * \r\n * @param client - The signer wallet instance used to sign the payment header\r\n * @param paymentRequirements - The payment requirements containing scheme and network information\r\n * @param unsignedPaymentHeader - The unsigned payment payload to be signed\r\n * @returns A promise that resolves to the encoded signed payment header string\r\n */\r\nexport async function signPaymentHeader(\r\n  client: SignerWallet,\r\n  paymentRequirements: PaymentRequirements,\r\n  unsignedPaymentHeader: UnsignedPaymentPayload,\r\n): Promise<string> {\r\n  if (\r\n    paymentRequirements.scheme === \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    const signedPaymentHeader = await signPaymentHeaderExactEVM(client, paymentRequirements, unsignedPaymentHeader);\r\n    return encodePayment(signedPaymentHeader);\r\n  }\r\n\r\n  throw new Error(\"Unsupported scheme\");\r\n}","import { Account, Address, Chain, Hex, Transport, verifyTypedData } from \"viem\";\r\nimport { getNetworkId } from \"../../../shared\";\r\nimport { getVersion, getERC20Balance } from \"../../../shared/evm\";\r\nimport {\r\n  usdcABI as abi,\r\n  authorizationTypes,\r\n  config,\r\n  ConnectedClient,\r\n  SignerWallet,\r\n} from \"../../../types/shared/evm\";\r\nimport {\r\n  PaymentPayload,\r\n  PaymentRequirements,\r\n  SettleResponse,\r\n  VerifyResponse,\r\n} from \"../../../types/verify\";\r\nimport { SCHEME } from \"../../exact\";\r\n\r\n/**\r\n * Verifies a payment payload against the required payment details\r\n *\r\n * This function performs several verification steps:\r\n * - Verifies protocol version compatibility\r\n * - Validates the permit signature\r\n * - Confirms USDC contract address is correct for the chain\r\n * - Checks permit deadline is sufficiently in the future\r\n * - Verifies client has sufficient USDC balance\r\n * - Ensures payment amount meets required minimum\r\n *\r\n * @param client - The public client used for blockchain interactions\r\n * @param payload - The signed payment payload containing transfer parameters and signature\r\n * @param paymentRequirements - The payment requirements that the payload must satisfy\r\n * @returns A ValidPaymentRequest indicating if the payment is valid and any invalidation reason\r\n */\r\nexport async function verify<\r\n  transport extends Transport,\r\n  chain extends Chain,\r\n  account extends Account | undefined,\r\n>(\r\n  client: ConnectedClient<transport, chain, account>,\r\n  payload: PaymentPayload,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<VerifyResponse> {\r\n  /* TODO: work with security team on brainstorming more verification steps\r\n  verification steps:\r\n    - ✅ verify payload version\r\n    - ✅ verify usdc address is correct for the chain\r\n    - ✅ verify permit signature\r\n    - ✅ verify deadline\r\n    - verify nonce is current\r\n    - ✅ verify client has enough funds to cover paymentRequirements.maxAmountRequired\r\n    - ✅ verify value in payload is enough to cover paymentRequirements.maxAmountRequired\r\n    - check min amount is above some threshold we think is reasonable for covering gas\r\n    - verify resource is not already paid for (next version)\r\n    */\r\n\r\n  // Verify payload version\r\n  if (payload.scheme !== SCHEME || paymentRequirements.scheme !== SCHEME) {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: `Incompatible payload scheme. payload: ${payload.scheme}, paymentRequirements: ${paymentRequirements.scheme}, supported: ${SCHEME}`,\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n\r\n  let name: string;\r\n  let chainId: number;\r\n  let erc20Address: Address;\r\n  let version: string;\r\n  try {\r\n    chainId = getNetworkId(payload.network);\r\n    name = paymentRequirements.extra?.name ?? config[chainId.toString()].usdcName;\r\n    erc20Address = paymentRequirements.asset as Address;\r\n    version = paymentRequirements.extra?.version ?? (await getVersion(client));\r\n  } catch {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: `invalid_network`,\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n  // Verify permit signature is recoverable for the owner address\r\n  const permitTypedData = {\r\n    types: authorizationTypes,\r\n    primaryType: \"TransferWithAuthorization\" as const,\r\n    domain: {\r\n      name,\r\n      version,\r\n      chainId,\r\n      verifyingContract: erc20Address,\r\n    },\r\n    message: {\r\n      from: payload.payload.authorization.from,\r\n      to: payload.payload.authorization.to,\r\n      value: payload.payload.authorization.value,\r\n      validAfter: payload.payload.authorization.validAfter,\r\n      validBefore: payload.payload.authorization.validBefore,\r\n      nonce: payload.payload.authorization.nonce,\r\n    },\r\n  };\r\n  const recoveredAddress = await verifyTypedData({\r\n    address: payload.payload.authorization.from as Address,\r\n    ...permitTypedData,\r\n    signature: payload.payload.signature as Hex,\r\n  });\r\n  if (!recoveredAddress) {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: \"invalid_scheme\", //\"Invalid permit signature\",\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n\r\n  // Verify deadline is not yet expired\r\n  // Pad 3 block to account for round tripping\r\n  if (\r\n    BigInt(payload.payload.authorization.validBefore) < BigInt(Math.floor(Date.now() / 1000) + 6)\r\n  ) {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: \"invalid_scheme\", //\"Deadline on permit isn't far enough in the future\",\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n  // Verify deadline is not yet valid\r\n  if (BigInt(payload.payload.authorization.validAfter) > BigInt(Math.floor(Date.now() / 1000))) {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: \"invalid_scheme\", //\"Deadline on permit is in the future\",\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n  // Verify client has enough funds to cover paymentRequirements.maxAmountRequired\r\n  const balance = await getERC20Balance(\r\n    client,\r\n    erc20Address,\r\n    payload.payload.authorization.from as Address,\r\n  );\r\n  if (balance < BigInt(paymentRequirements.maxAmountRequired)) {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: \"insufficient_funds\", //\"Client does not have enough funds\",\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n  // Verify value in payload is enough to cover paymentRequirements.maxAmountRequired\r\n  if (BigInt(payload.payload.authorization.value) < BigInt(paymentRequirements.maxAmountRequired)) {\r\n    return {\r\n      isValid: false,\r\n      invalidReason: \"invalid_scheme\", //\"Value in payload is not enough to cover paymentRequirements.maxAmountRequired\",\r\n      payer: payload.payload.authorization.from,\r\n    };\r\n  }\r\n  return {\r\n    isValid: true,\r\n    invalidReason: undefined,\r\n    payer: payload.payload.authorization.from,\r\n  };\r\n}\r\n\r\n/**\r\n * Settles a payment by executing a USDC transferWithAuthorization transaction\r\n *\r\n * This function executes the actual USDC transfer using the signed authorization from the user.\r\n * The facilitator wallet submits the transaction but does not need to hold or transfer any tokens itself.\r\n *\r\n * @param wallet - The facilitator wallet that will submit the transaction\r\n * @param paymentPayload - The signed payment payload containing the transfer parameters and signature\r\n * @param paymentRequirements - The original payment details that were used to create the payload\r\n * @returns A PaymentExecutionResponse containing the transaction status and hash\r\n */\r\nexport async function settle<transport extends Transport, chain extends Chain>(\r\n  wallet: SignerWallet<chain, transport>,\r\n  paymentPayload: PaymentPayload,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<SettleResponse> {\r\n  // re-verify to ensure the payment is still valid\r\n  const valid = await verify(wallet, paymentPayload, paymentRequirements);\r\n\r\n  if (!valid.isValid) {\r\n    return {\r\n      success: false,\r\n      network: paymentPayload.network,\r\n      transaction: \"\",\r\n      errorReason: \"invalid_scheme\", //`Payment is no longer valid: ${valid.invalidReason}`,\r\n      payer: paymentPayload.payload.authorization.from,\r\n    };\r\n  }\r\n\r\n  const tx = await wallet.writeContract({\r\n    address: paymentRequirements.asset as Address,\r\n    abi,\r\n    functionName: \"transferWithAuthorization\" as const,\r\n    args: [\r\n      paymentPayload.payload.authorization.from as Address,\r\n      paymentPayload.payload.authorization.to as Address,\r\n      BigInt(paymentPayload.payload.authorization.value),\r\n      BigInt(paymentPayload.payload.authorization.validAfter),\r\n      BigInt(paymentPayload.payload.authorization.validBefore),\r\n      paymentPayload.payload.authorization.nonce as Hex,\r\n      paymentPayload.payload.signature as Hex,\r\n    ],\r\n    chain: wallet.chain as Chain,\r\n  });\r\n\r\n  const receipt = await wallet.waitForTransactionReceipt({ hash: tx });\r\n\r\n  if (receipt.status !== \"success\") {\r\n    return {\r\n      success: false,\r\n      errorReason: \"invalid_scheme\", //`Transaction failed`,\r\n      transaction: tx,\r\n      network: paymentPayload.network,\r\n      payer: paymentPayload.payload.authorization.from,\r\n    };\r\n  }\r\n\r\n  return {\r\n    success: true,\r\n    transaction: tx,\r\n    network: paymentPayload.network,\r\n    payer: paymentPayload.payload.authorization.from,\r\n  };\r\n}\r\n","export * as evm from \"./evm\";\r\n\r\nexport const SCHEME = \"exact\";\r\n","import { verify as verifyExact, settle as settleExact } from \"../schemes/exact/evm\";\r\nimport { SupportedEVMNetworks } from \"../types/shared\";\r\nimport { ConnectedClient, SignerWallet } from \"../types/shared/evm\";\r\nimport {\r\n  PaymentPayload,\r\n  PaymentRequirements,\r\n  SettleResponse,\r\n  VerifyResponse,\r\n} from \"../types/verify\";\r\nimport { Chain, Transport, Account } from \"viem\";\r\n\r\n/**\r\n * Verifies a payment payload against the required payment details regardless of the scheme\r\n * this function wraps all verify functions for each specific scheme\r\n *\r\n * @param client - The public client used for blockchain interactions\r\n * @param payload - The signed payment payload containing transfer parameters and signature\r\n * @param paymentRequirements - The payment requirements that the payload must satisfy\r\n * @returns A ValidPaymentRequest indicating if the payment is valid and any invalidation reason\r\n */\r\nexport async function verify<\r\n  transport extends Transport,\r\n  chain extends Chain,\r\n  account extends Account | undefined,\r\n>(\r\n  client: ConnectedClient<transport, chain, account>,\r\n  payload: PaymentPayload,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<VerifyResponse> {\r\n  if (\r\n    paymentRequirements.scheme == \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    const valid = await verifyExact(client, payload, paymentRequirements);\r\n    return valid;\r\n  }\r\n  return {\r\n    isValid: false,\r\n    invalidReason: \"invalid_scheme\",\r\n    payer: payload.payload.authorization.from,\r\n  };\r\n}\r\n\r\n/**\r\n * Settles a payment payload against the required payment details regardless of the scheme\r\n * this function wraps all settle functions for each specific scheme\r\n *\r\n * @param client - The signer wallet used for blockchain interactions\r\n * @param payload - The signed payment payload containing transfer parameters and signature\r\n * @param paymentRequirements - The payment requirements that the payload must satisfy\r\n * @returns A SettleResponse indicating if the payment is settled and any settlement reason\r\n */\r\nexport async function settle<transport extends Transport, chain extends Chain>(\r\n  client: SignerWallet<chain, transport>,\r\n  payload: PaymentPayload,\r\n  paymentRequirements: PaymentRequirements,\r\n): Promise<SettleResponse> {\r\n  if (\r\n    paymentRequirements.scheme == \"exact\" &&\r\n    SupportedEVMNetworks.includes(paymentRequirements.network)\r\n  ) {\r\n    return settleExact(client, payload, paymentRequirements);\r\n  }\r\n\r\n  return {\r\n    success: false,\r\n    errorReason: \"invalid_scheme\",\r\n    transaction: \"\",\r\n    network: paymentRequirements.network,\r\n    payer: payload.payload.authorization.from,\r\n  };\r\n}\r\n\r\nexport type Supported = {\r\n  x402Version: number;\r\n  kind: {\r\n    scheme: string;\r\n    networkId: string;\r\n  }[];\r\n};\r\n"],"mappings":"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","names":["createPaymentHeader","preparePaymentHeader","settle","signPaymentHeader","verify","import_viem","import_zod","import_zod","import_zod","version","version","x402Version","createPaymentHeader","x402Version","preparePaymentHeader","x402Version","signPaymentHeader","import_viem","version","verify","settle"]}