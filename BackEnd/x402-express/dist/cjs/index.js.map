{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { Address } from \"viem\";\r\nimport { exact } from \"x402/schemes\";\r\nimport {\r\n  computeRoutePatterns,\r\n  findMatchingPaymentRequirements,\r\n  findMatchingRoute,\r\n  getPaywallHtml,\r\n  processPriceToAtomicAmount,\r\n  toJsonSafe,\r\n} from \"x402/shared\";\r\nimport {\r\n  FacilitatorConfig,\r\n  moneySchema,\r\n  PaymentPayload,\r\n  PaymentRequirements,\r\n  Resource,\r\n  RoutesConfig,\r\n  settleResponseHeader,\r\n} from \"x402/types\";\r\nimport { useFacilitator } from \"x402/verify\";\r\n\r\n/**\r\n * Creates a payment middleware factory for Express\r\n *\r\n * @param payTo - The Ethereum address to receive payments\r\n * @param routes - Configuration for protected routes and their payment requirements\r\n * @param facilitator - Optional configuration for the payment facilitator service\r\n * @returns An Express middleware handler\r\n *\r\n * @example\r\n * ```typescript\r\n * // Full configuration with specific routes\r\n * const middleware = paymentMiddleware({\r\n *   facilitator: {\r\n *     url: 'https://facilitator.example.com',\r\n *     createAuthHeaders: async () => ({\r\n *       verify: { \"Authorization\": \"Bearer token\" },\r\n *       settle: { \"Authorization\": \"Bearer token\" }\r\n *     })\r\n *   },\r\n *   payTo: '0x123...',\r\n *   routes: {\r\n *     '/weather/*': {\r\n *       price: '$0.001', // USDC amount in dollars\r\n *       config: {\r\n *         description: 'Access to weather data'\r\n *       }\r\n *     }\r\n *   }\r\n * });\r\n *\r\n * // Simple configuration with a single price for all routes\r\n * const middleware = paymentMiddleware({\r\n *   facilitator: {\r\n *     url: 'https://facilitator.example.com'\r\n *   },\r\n *   payTo: '0x123...',\r\n *   routes: {\r\n *     price: '$0.01',\r\n *     network: 'base'\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport function paymentMiddleware(\r\n  payTo: Address,\r\n  routes: RoutesConfig,\r\n  facilitator?: FacilitatorConfig,\r\n) {\r\n  const { verify, settle } = useFacilitator(facilitator);\r\n  const x402Version = 1;\r\n\r\n  // Pre-compile route patterns to regex and extract verbs\r\n  const routePatterns = computeRoutePatterns(routes);\r\n\r\n  return async function paymentMiddleware(\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction,\r\n  ): Promise<void> {\r\n    const matchingRoute = findMatchingRoute(routePatterns, req.path, req.method.toUpperCase());\r\n\r\n    if (!matchingRoute) {\r\n      return next();\r\n    }\r\n\r\n    const { price, network, config = {} } = matchingRoute.config;\r\n    const { description, mimeType, maxTimeoutSeconds, outputSchema, customPaywallHtml, resource } =\r\n      config;\r\n\r\n    const atomicAmountForAsset = processPriceToAtomicAmount(price, network);\r\n    if (\"error\" in atomicAmountForAsset) {\r\n      throw new Error(atomicAmountForAsset.error);\r\n    }\r\n    const { maxAmountRequired, asset } = atomicAmountForAsset;\r\n\r\n    const resourceUrl: Resource =\r\n      resource || (`${req.protocol}://${req.headers.host}${req.path}` as Resource);\r\n\r\n    const paymentRequirements: PaymentRequirements[] = [\r\n      {\r\n        scheme: \"exact\",\r\n        network,\r\n        maxAmountRequired,\r\n        resource: resourceUrl,\r\n        description: description ?? \"\",\r\n        mimeType: mimeType ?? \"\",\r\n        payTo,\r\n        maxTimeoutSeconds: maxTimeoutSeconds ?? 60,\r\n        asset: asset.address,\r\n        outputSchema: outputSchema ?? undefined,\r\n        extra: {\r\n          name: asset.eip712.name,\r\n          version: asset.eip712.version,\r\n        },\r\n      },\r\n    ];\r\n\r\n    const payment = req.header(\"X-PAYMENT\");\r\n    const userAgent = req.header(\"User-Agent\") || \"\";\r\n    const acceptHeader = req.header(\"Accept\") || \"\";\r\n    const isWebBrowser = acceptHeader.includes(\"text/html\") && userAgent.includes(\"Mozilla\");\r\n\r\n    if (!payment) {\r\n      if (isWebBrowser) {\r\n        let displayAmount: number;\r\n        if (typeof price === \"string\" || typeof price === \"number\") {\r\n          const parsed = moneySchema.safeParse(price);\r\n          if (parsed.success) {\r\n            displayAmount = parsed.data;\r\n          } else {\r\n            displayAmount = Number.NaN;\r\n          }\r\n        } else {\r\n          displayAmount = Number(price.amount) / 10 ** price.asset.decimals;\r\n        }\r\n\r\n        const html =\r\n          customPaywallHtml ||\r\n          getPaywallHtml({\r\n            amount: displayAmount,\r\n            paymentRequirements: toJsonSafe(paymentRequirements) as Parameters<\r\n              typeof getPaywallHtml\r\n            >[0][\"paymentRequirements\"],\r\n            currentUrl: req.originalUrl,\r\n            testnet: network === \"base-sepolia\",\r\n          });\r\n        res.status(402).send(html);\r\n        return;\r\n      }\r\n      res.status(402).json({\r\n        x402Version,\r\n        error: \"X-PAYMENT header is required\",\r\n        accepts: toJsonSafe(paymentRequirements),\r\n      });\r\n      return;\r\n    }\r\n\r\n    let decodedPayment: PaymentPayload;\r\n    try {\r\n      decodedPayment = exact.evm.decodePayment(payment);\r\n      decodedPayment.x402Version = x402Version;\r\n    } catch (error) {\r\n      res.status(402).json({\r\n        x402Version,\r\n        error: error || \"Invalid or malformed payment header\",\r\n        accepts: toJsonSafe(paymentRequirements),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const selectedPaymentRequirements = findMatchingPaymentRequirements(\r\n      paymentRequirements,\r\n      decodedPayment,\r\n    );\r\n    if (!selectedPaymentRequirements) {\r\n      res.status(402).json({\r\n        x402Version,\r\n        error: \"Unable to find matching payment requirements\",\r\n        accepts: toJsonSafe(paymentRequirements),\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await verify(decodedPayment, selectedPaymentRequirements);\r\n      if (!response.isValid) {\r\n        res.status(402).json({\r\n          x402Version,\r\n          error: response.invalidReason,\r\n          accepts: toJsonSafe(paymentRequirements),\r\n          payer: response.payer,\r\n        });\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      res.status(402).json({\r\n        x402Version,\r\n        error,\r\n        accepts: toJsonSafe(paymentRequirements),\r\n      });\r\n      return;\r\n    }\r\n\r\n    /* eslint-disable @typescript-eslint/no-explicit-any */\r\n    type EndArgs =\r\n      | [cb?: () => void]\r\n      | [chunk: any, cb?: () => void]\r\n      | [chunk: any, encoding: BufferEncoding, cb?: () => void];\r\n    /* eslint-enable @typescript-eslint/no-explicit-any */\r\n\r\n    const originalEnd = res.end.bind(res);\r\n    let endArgs: EndArgs | null = null;\r\n\r\n    res.end = function (...args: EndArgs) {\r\n      endArgs = args;\r\n      return res; // maintain correct return type\r\n    };\r\n\r\n    // Proceed to the next middleware or route handler\r\n    await next();\r\n\r\n    try {\r\n      const settleResponse = await settle(decodedPayment, selectedPaymentRequirements);\r\n      const responseHeader = settleResponseHeader(settleResponse);\r\n      res.setHeader(\"X-PAYMENT-RESPONSE\", responseHeader);\r\n    } catch (error) {\r\n      // If settlement fails and the response hasn't been sent yet, return an error\r\n      if (!res.headersSent) {\r\n        res.status(402).json({\r\n          x402Version,\r\n          error,\r\n          accepts: toJsonSafe(paymentRequirements),\r\n        });\r\n        return;\r\n      }\r\n    } finally {\r\n      res.end = originalEnd;\r\n      if (endArgs) {\r\n        originalEnd(...(endArgs as Parameters<typeof res.end>));\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport type {\r\n  Money,\r\n  Network,\r\n  PaymentMiddlewareConfig,\r\n  Resource,\r\n  RouteConfig,\r\n  RoutesConfig,\r\n} from \"x402/types\";\r\n"],"mappings":"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","names":["paymentMiddleware"]}