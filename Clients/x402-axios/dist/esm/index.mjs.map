{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import { AxiosInstance, AxiosError } from \"axios\";\r\nimport { ChainIdToNetwork, PaymentRequirements, PaymentRequirementsSchema } from \"x402/types\";\r\nimport { evm } from \"x402/types\";\r\nimport {\r\n  createPaymentHeader,\r\n  PaymentRequirementsSelector,\r\n  selectPaymentRequirements,\r\n} from \"x402/client\";\r\nimport { Account } from \"viem\";\r\n\r\n/**\r\n * Enables the payment of APIs using the x402 payment protocol.\r\n *\r\n * When a request receives a 402 response:\r\n * 1. Extracts payment requirements from the response\r\n * 2. Creates a payment header using the provided wallet client\r\n * 3. Retries the original request with the payment header\r\n * 4. Exposes the X-PAYMENT-RESPONSE header in the final response\r\n *\r\n * @param axiosClient - The Axios instance to add the interceptor to\r\n * @param walletClient - A wallet client that can sign transactions and create payment headers\r\n * @param paymentRequirementsSelector - A function that selects the payment requirements from the response\r\n * @returns The modified Axios instance with the payment interceptor\r\n *\r\n * @example\r\n * ```typescript\r\n * const client = withPaymentInterceptor(\r\n *   axios.create(),\r\n *   signer\r\n * );\r\n *\r\n * // The client will automatically handle 402 responses\r\n * const response = await client.get('https://api.example.com/premium-content');\r\n * ```\r\n */\r\nexport function withPaymentInterceptor(\r\n  axiosClient: AxiosInstance,\r\n  walletClient: typeof evm.SignerWallet | Account,\r\n  paymentRequirementsSelector: PaymentRequirementsSelector = selectPaymentRequirements,\r\n) {\r\n  axiosClient.interceptors.response.use(\r\n    response => response,\r\n    async (error: AxiosError) => {\r\n      if (!error.response || error.response.status !== 402) {\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      try {\r\n        const originalConfig = error.config;\r\n        if (!originalConfig || !originalConfig.headers) {\r\n          return Promise.reject(new Error(\"Missing axios request configuration\"));\r\n        }\r\n\r\n        if ((originalConfig as { __is402Retry?: boolean }).__is402Retry) {\r\n          return Promise.reject(error);\r\n        }\r\n\r\n        const { x402Version, accepts } = error.response.data as {\r\n          x402Version: number;\r\n          accepts: PaymentRequirements[];\r\n        };\r\n        const parsed = accepts.map(x => PaymentRequirementsSchema.parse(x));\r\n\r\n        const chainId = evm.isSignerWallet(walletClient)\r\n          ? walletClient.chain?.id\r\n          : evm.isAccount(walletClient)\r\n            ? walletClient.client?.chain?.id\r\n            : undefined;\r\n\r\n        const selectedPaymentRequirements = paymentRequirementsSelector(\r\n          parsed,\r\n          chainId ? ChainIdToNetwork[chainId] : undefined,\r\n          \"exact\",\r\n        );\r\n        const paymentHeader = await createPaymentHeader(\r\n          walletClient,\r\n          x402Version,\r\n          selectedPaymentRequirements,\r\n        );\r\n\r\n        (originalConfig as { __is402Retry?: boolean }).__is402Retry = true;\r\n\r\n        originalConfig.headers[\"X-PAYMENT\"] = paymentHeader;\r\n        originalConfig.headers[\"Access-Control-Expose-Headers\"] = \"X-PAYMENT-RESPONSE\";\r\n\r\n        const secondResponse = await axiosClient.request(originalConfig);\r\n        return secondResponse;\r\n      } catch (paymentError) {\r\n        return Promise.reject(paymentError);\r\n      }\r\n    },\r\n  );\r\n\r\n  return axiosClient;\r\n}\r\n\r\nexport { decodeXPaymentResponse } from \"x402/shared\";\r\n"],"mappings":";AACA,SAAS,kBAAuC,iCAAiC;AACjF,SAAS,WAAW;AACpB;AAAA,EACE;AAAA,EAEA;AAAA,OACK;AAyFP,SAAS,8BAA8B;AA7DhC,SAAS,uBACd,aACA,cACA,8BAA2D,2BAC3D;AACA,cAAY,aAAa,SAAS;AAAA,IAChC,cAAY;AAAA,IACZ,OAAO,UAAsB;AA1CjC;AA2CM,UAAI,CAAC,MAAM,YAAY,MAAM,SAAS,WAAW,KAAK;AACpD,eAAO,QAAQ,OAAO,KAAK;AAAA,MAC7B;AAEA,UAAI;AACF,cAAM,iBAAiB,MAAM;AAC7B,YAAI,CAAC,kBAAkB,CAAC,eAAe,SAAS;AAC9C,iBAAO,QAAQ,OAAO,IAAI,MAAM,qCAAqC,CAAC;AAAA,QACxE;AAEA,YAAK,eAA8C,cAAc;AAC/D,iBAAO,QAAQ,OAAO,KAAK;AAAA,QAC7B;AAEA,cAAM,EAAE,aAAa,QAAQ,IAAI,MAAM,SAAS;AAIhD,cAAM,SAAS,QAAQ,IAAI,OAAK,0BAA0B,MAAM,CAAC,CAAC;AAElE,cAAM,UAAU,IAAI,eAAe,YAAY,KAC3C,kBAAa,UAAb,mBAAoB,KACpB,IAAI,UAAU,YAAY,KACxB,wBAAa,WAAb,mBAAqB,UAArB,mBAA4B,KAC5B;AAEN,cAAM,8BAA8B;AAAA,UAClC;AAAA,UACA,UAAU,iBAAiB,OAAO,IAAI;AAAA,UACtC;AAAA,QACF;AACA,cAAM,gBAAgB,MAAM;AAAA,UAC1B;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,QAAC,eAA8C,eAAe;AAE9D,uBAAe,QAAQ,WAAW,IAAI;AACtC,uBAAe,QAAQ,+BAA+B,IAAI;AAE1D,cAAM,iBAAiB,MAAM,YAAY,QAAQ,cAAc;AAC/D,eAAO;AAAA,MACT,SAAS,cAAc;AACrB,eAAO,QAAQ,OAAO,YAAY;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}